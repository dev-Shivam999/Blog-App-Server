generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bloger {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  password  String
  img       String
  blogs     Blog[]
  Following Follow[] @relation("FollowedBy")
  Followers Follow[] @relation("Follows")
  Likes     Like[]
  Save      Save[]
  Chat Chat[]
  Messages Messages[] @relation("ChatRoom")
} 


model Messages{
  id Int @id @default(autoincrement())
  Room Int
  RoomId Bloger @relation("ChatRoom",fields: [Room],references: [id],onDelete: Cascade)
  ChatId String
  Chat Chat[]
}

model Chat {
  id           String   @id @default(uuid())
  SendTo       Int
  sendTo       Bloger   @relation(fields: [SendTo], references: [id], onDelete: Cascade)
  content      String
  messageId    Int
  messages     Messages @relation(fields: [messageId], references: [id], onDelete: Cascade)
}
model Follow {
  id       Int    @id @default(autoincrement())
  follow   Int
  follower Int
  Follwing Bloger @relation("FollowedBy", fields: [follow], references: [id], onDelete: Cascade)
  Follwers Bloger @relation("Follows", fields: [follower], references: [id], onDelete: Cascade)

  @@unique([follow, follower])
}

model Save {
  id       Int    @id @default(autoincrement())
  blogId   String
  blogerId Int
  blog     Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  bloger   Bloger @relation(fields: [blogerId], references: [id], onDelete: Cascade)
}

model Like {
  id       Int    @id @default(autoincrement())
  blog     Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId   String
  bloger   Bloger @relation(fields: [blogerId], references: [id], onDelete: Cascade)
  blogerId Int
}



model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  authoreId Int
  avtar     String
  created   DateTime @default(now())
  authore   Bloger   @relation(fields: [authoreId], references: [id], onDelete: Cascade)
  Likes     Like[]
  saves     Save[]
}
